// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © marekhanzal

//@version=5
// strategy("PiPi", overlay = true, default_qty_value = 2, currency = currency.USD, pyramiding = 1, process_orders_on_close = false, initial_capital = 1000, max_lines_count = 500, max_bars_back = 4900, max_boxes_count = 500, max_labels_count = 500, calc_on_order_fills = false)
indicator("PiPi", overlay = true, max_lines_count = 500, max_bars_back = 4900, max_boxes_count = 500, max_labels_count = 500)

//  ====================================================================================================================================================
//      Library: Level
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Types
	//  ====================================================================================================================================================

//	@type			This is a level; because trading is not about exact numbers, Level is represented by a range (low and high); for a single line both can be the same value
//	@field	name	Level name used to programatically identify it's kind
//	@field	low		Level low value; for single value levels, both should be same
//	@field	high	Level high value; for single value levels, both should be same
//	@field	level	Level middle value
//	@field	size	Absolute diff between low and high
type Level
	string	name
	float	low
	float	high
	float	level
	float	size

	//	---		Factory methods

//	@function			Default level factory with low/high; level (middle) and size (high - low) is computed automatically
//	@param		name	Level name
//	@param		low		Low value (level size and middle is based on both low and high)
//	@param		high	High value (level size and middle is based on both low and high)
level_create(string name, float low, float high)		=>	Level.new(name, low, high, (high - low) / 2, math.abs(high - low))

//	@function	Creates "na" level
level_create()											=>  Level.new(na, na, na, na, na)

//	@function			Creates	level based on value and low/high based on the factor
//	@param		name	Level name
//	@param		level	Value
//	@param		size	Level size: low = level - size; high = level + size
level_size(string name, float level, float size)	=>	Level.new(name, level - size, level + size, level, size * 2)

	//  ====================================================================================================================================================
	//      Mutations
	//  ====================================================================================================================================================

//	@function	Sets new level low; also updates "level" and "size"
level_low(Level level, float low) =>
	if not na(level)
		level.low	:=	low
		level.level	:=	(level.high + level.low) / 2
		level.size	:=	math.abs(level.low - level.high)

//	@function	Sets new level high; also updates "level" and "size"
level_high(Level level, float high) =>
	if not na(level)
		level.high	:=	high
		level.level	:=	(level.high + level.low) / 2
		level.size	:=	math.abs(level.low - level.high)

//	@function	Set both low and high and updates "level" and "size"
level_low_high(Level level, float low, float high) =>
	level_low(level, low)
	level_high(level, high)

//	@function	Push new level into levels map using "level" and "size"
level_push_size(map<string, Level> levels, string name, float level, float size) =>
    levels.put(name, level_size(name, level, size))

	//  ====================================================================================================================================================
	//      Tools
	//  ====================================================================================================================================================

//	@function	Checks if the given value is inside a level
level_inside(Level level, float value) =>	value >= level.low and value <= level.high

	//  ====================================================================================================================================================
	//      Rendering
	//  ====================================================================================================================================================

//	@function			Simple function to render a level
//	@param		name	Explicit level name used to track rendering of primitives
//	@param		level	So, you want render a Level?
//	@param		index	Start index (bar_index)
//	@param		last	Last index; "na" for extend right
//	@param		color	Yes, color
//	@param		zone	Simple mode draws only single line (Levels "level"), otherwise all level lines are rendered (low, high, level)
level_render_zone(string name, Level level, int index, int last, color color, bool zone = false) =>
	var line	_line_low		=	na
	var line	_line_level		=	na
	var line	_line_high		=	na
	var box		_box			=	na

	line.delete(_line_low)
	line.delete(_line_level)
	line.delete(_line_high)

	box.delete(_box)

	if not na(level)
		_index	=	na(index)	? bar_index		: index
		_last	=	na(last)	? index + 1		: last
		_extend	=	na(last)	? extend.right	: extend.none
		_extend:=	na(last) and na(index) ? extend.both : _extend

		_line_level:=	line.new(_index,	level.level,	_last,	level.level,	style = line.style_solid,	extend = _extend, color = color, width = 1)

		if zone
			_line_low	:=	line.new(_index,	level.low,	_last,	level.low, 		style = line.style_dotted,	extend = _extend, color = color, width = 1)
			_line_high	:=	line.new(_index,	level.high,	_last,	level.high,		style = line.style_dotted,	extend = _extend, color = color, width = 1)
			_box		:=	box.new(_index,		level.high,	_last,	level.low,									extend = _extend, border_color = na, border_width = na, bgcolor = color.new(color, 95))

	true

//  ====================================================================================================================================================
//      Library: Toolbox
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Utilities
	//  ====================================================================================================================================================

	//  --- Hack used to call block one time only, useful for setting up var arrays/maps which cannot be created in one statement

use_init() =>
	var bool	init	= true
	bool		_init	= init
	init:=	false

	_init

	//  ---		Somehow independent Fibbonachi level computation

fibbonachi(Level level, float factor = 0) =>
	_diff 		= math.abs(level.high - level.low)
	_base		= level.high
	_fibb		= map.new<string, Level>()

	level_push_size(_fibb, "0", 		_base - (_diff * 0.000), factor)
	level_push_size(_fibb, "20",		_base - (_diff * 0.236), factor)
	level_push_size(_fibb, "30",		_base - (_diff * 0.382), factor)
	level_push_size(_fibb, "50",		_base - (_diff * 0.500), factor)
	level_push_size(_fibb, "60",		_base - (_diff * 0.618), factor)
	level_push_size(_fibb, "70",		_base - (_diff * 0.786), factor)
	level_push_size(_fibb, "100",		_base - (_diff * 1.000), factor)

	_fibb

//  ====================================================================================================================================================
//      Library: Context
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Types
	//  ====================================================================================================================================================

//	@type			Value represents PineScript's type accessible from PiPi Script; usually only one value should be set
//	@field	name	Represents any string value
//	@field	flag	Represents true/false state, for example uptrend, crossings or whatever
//	@field	value	Could be any static or computed value, for example day's price range
//	@field	level	Represents a level; could be a single number or (usually) a range
type Value
	string		_string
	bool	    _bool
	float		_float
	Level		_level

//	@type			Most important piece of this indicator - there are providers of a context, each managing it's internal state; Context is also used as a communication interface between providers and PiPi Script
//	@field	name	Name of a context, referenced from PiPi Script and providers
//	@field	value	Holds all the variables accessible from the PiPi script
type Context
	string					name
	map<string, Value>		value

//	@type			Just simple wrapper, so we can add contexts to an array
type Contexts
	map<string, Context>	map

	//  ---     Value Factory methods

value_create(string _string)								=>	Value.new(_string, na, na, na)
value_create(bool _bool)									=>	Value.new(na, _bool, na, na)
value_create(float _float)									=>	Value.new(na, na, _float, na)
value_create(Level _level)									=>	Value.new(na, na, na, _level)

	//			Value utility methods

//	@function	If "value" is "na", return "default"; just shorthand for a bit better readability
value_na(Value value, Value default)						=>	na(value) ? default : value
value_copy(Value value)										=>	na(value._level) ? value.copy() : value_create(value._level.copy())

	//  ---     Context Factory methods

context_create(string name)									=>  Context.new(name, map.new<string, Value>())
contexts_create()											=>  Contexts.new(map.new<string, Context>())

	//  ====================================================================================================================================================
	//      Context methods
	//  ====================================================================================================================================================

	//  ---     Context - Utilities

use_context(Contexts contexts, Context context)	=>
	contexts.map.put(context.name, context)
	context

context(Context context, Context default)	=>	na(context) ? default : context

contexts_context(Contexts contexts, string context) =>
	_context = contexts.map.contains(context) ? contexts.map.get(context) : context_create(context)
	contexts.map.put(context, _context)
	_context

	//  ---     Context - Setters

context_set(Context context, string name, Value value)		    =>
	context.value.put(name, value)
	value

context_set(Context context, string name, string value)		    =>
	context_set(context, name, value_create(value))
	value

context_set(Context context, string name, bool value)		    =>
	context_set(context, name, value_create(value))
	value

context_set(Context context, string name, float value)		    =>
	context_set(context, name, value_create(value))
	value

context_set(Context context, string name, Level value)			=>
	context_set(context, name, value_create(value))

	context_set(context, name + ".low",		value.low)
	context_set(context, name + ".high",	value.high)
	context_set(context, name + ".level",	value.level)
	context_set(context, name + ".size",	value.size)

	value

context_set(Context context, Level value)				    	=>
	context_set(context, value.name, value)

context_set(Context context, map<string, Level> levels)    		=>
	for [__name, __level] in levels
		context_set(context, __name, __level)

	levels

	//  ---     Contexts - Setters

contexts_set(Contexts contexts, string context, string name, string			value)	=>	context_set(contexts_context(contexts, context), name, value)
contexts_set(Contexts contexts, string context, string name, float			value)	=>	context_set(contexts_context(contexts, context), name, value)
contexts_set(Contexts contexts, string context, string name, bool			value)	=>	context_set(contexts_context(contexts, context), name, value)
contexts_set(Contexts contexts, string context, string name, Level			value)	=>	context_set(contexts_context(contexts, context), name, value)

	//  ---     Context - Getters

	//  Common getters

context_get			(Context context, string name, Value	default)		=>
	if not context.value.contains(name)
		log.warning("unknown value [{0}.{1}]", context.name, name)

	value_na(context.value.get(name), default)

context_get_string  (Context context, string name, string 		default	= na)		=>	context_get(	context, name,		value_create(default))._string
context_get_bool    (Context context, string name, bool			default	= na)		=>	context_get(	context, name,		value_create(default))._bool
context_get_float	(Context context, string name, float		default	= na)		=>	context_get(	context, name,		value_create(default))._float
context_get_int		(Context context, string name, int			default	= na)		=>	int(context_get(context, name,		value_create(default))._float)
context_get_level	(Context context, string name, Level		default	= na)	    =>	context_get(	context, name,		value_create(default))._level

	//  Contexts getters

contexts_get_string	(Contexts contexts, string context, string name, string			default	= na)	=>	context_get_string( context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_bool	(Contexts contexts, string context, string name, bool			default	= na)	=>	context_get_bool(   context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_float	(Contexts contexts, string context, string name, float			default	= na)	=>	context_get_float(  context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_int	(Contexts contexts, string context, string name, int 			default	= na)	=>	context_get_int(    context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_level	(Contexts contexts, string context, string name, Level			default	= na)	=>	context_get_level(  context(contexts.map.get(context),	context_create(context)), name, default)

	//  Context access getters

contexts_get_string(Contexts contexts, string[] value) =>
	switch value.size()
		1 =>	value.get(0)
		2 =>	contexts_get_string(contexts, value.get(0), value.get(1))

contexts_get_bool(Contexts contexts, string[] value) =>
	switch value.size()
		1 =>
			switch value.get(0)
				"true"	=> true
				"false"	=> false
				=> na

		2 => contexts_get_bool(contexts, value.get(0), value.get(1))

contexts_get_float(Contexts contexts, string[] value) =>
	switch value.size()
		1 =>	str.tonumber(value.get(0))
		2 =>	contexts_get_float(contexts, value.get(0), value.get(1))
		3 =>	contexts_get_float(contexts, value.get(0), value.get(1)) * str.tonumber(value.get(2))

//  ====================================================================================================================================================
//      Library: source
//			Here are all sources (contexts providers) for PiPi
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Day-Low-High provider
	//  ====================================================================================================================================================

//	@function	Manages context of current Day Low/High and related events
use_day(Contexts contexts) =>
	var Context		_context	=	context_create("day")
	var	Level		_level		=	level_create("day", low, high)

	context_set(_context, "change",			false)
	context_set(_context, "new-day",		false)
	context_set(_context, "higher-high",	false)
	context_set(_context, "lower-low",		false)
	context_set(_context, "level",			_level)

	if bool(ta.change(time('D')))
		level_low_high(_level, low, high)

		context_set(_context, "change",			true)
		context_set(_context, "new-day",		true)
		context_set(_context, "level",			_level)

	else if low < _level.low
		level_low(_level, low)

		context_set(_context, "change",			true)
		context_set(_context, "lower-low",		true)
		context_set(_context, "level", 			_level)

	else if high > _level.high
		level_high(_level, high)

		context_set(_context, "change",			true)
		context_set(_context, "higher-high",	true)
		context_set(_context, "level",			_level)

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      Day-Low-High Fibbonachi provider
	//  ====================================================================================================================================================

//	@function	Listens for changes of Day Low/High and adjusts Fibbonachi levels accordingly
use_day_fibbonachi(Contexts contexts, float factor) =>
	var Context	_context	=	context_create("day-fibbonachi")
	Level		_level		=	contexts_get_level(contexts, "day", "level")
	float		_factor		=	_level.size * (factor / 10)

	//	We don't want to execute Fibb computation on every bar - don't waste TradingView's resources on the same computations
	if use_init()
		context_set(_context, fibbonachi(_level, _factor))

	//	Same here - we're computing day's fibbonachi, so listen for changes comming from "use_day_low_high" or who provides the vallues
	if contexts_get_bool(contexts, "day", "change")
		context_set(_context, fibbonachi(_level, _factor))

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      EMA
	//  ====================================================================================================================================================

use_ema(Contexts contexts, int length_1, int length_2, int length_3, int length_4, int length_5, int length_6) =>
	var Context		_context	=	context_create("ema")

	_ema_1	=	ta.ema(close, length_1)
	_ema_2	=	ta.ema(close, length_2)
	_ema_3	=	ta.ema(close, length_3)
	_ema_4	=	ta.ema(close, length_4)
	_ema_5	=	ta.ema(close, length_5)
	_ema_6	=	ta.ema(close, length_6)

	context_set(_context,	level_size("1", _ema_1, 0))
	context_set(_context,	level_size("2", _ema_2, 0))
	context_set(_context,	level_size("3", _ema_3, 0))
	context_set(_context,	level_size("4", _ema_4, 0))
	context_set(_context,	level_size("5", _ema_5, 0))
	context_set(_context,	level_size("6", _ema_6, 0))

	_6_1	=	_ema_1 < _ema_2 and _ema_2 < _ema_3 and _ema_3 < _ema_4 and _ema_5 < _ema_6
	_1_6	=	_ema_1 > _ema_2 and _ema_2 > _ema_3 and _ema_3 > _ema_4 and _ema_5 > _ema_6
	context_set(_context,	"6-1",			_6_1)
	context_set(_context,	"6-1.signal",	_6_1 and not _6_1[1])

	context_set(_context,	"1-6",			_1_6)
	context_set(_context,	"1-6.signal",	_1_6 and not _1_6[1])

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      CCI
	//  ====================================================================================================================================================

use_cci(Contexts contexts, int length) =>
	var Context	_context	=	context_create("cci")

	_signal = ta.cci(hlc3, length)

	context_set(_context, "below",				_signal 	< 	-100)
	context_set(_context, "below.exit",			_signal[1]	<	-100	and _signal 	> -100)
	context_set(_context, "below.enter",		_signal		<	-100	and _signal[1]	> -100)

	context_set(_context, "above",				_signal 	> 	100)
	context_set(_context, "above.enter", 		_signal[1]	<	100		and _signal		> 100)
	context_set(_context, "above.exit", 		_signal[1]	>	100		and _signal		< 100)

	context_set(_context, "lower",				_signal 	< 	0)
	context_set(_context, "higher",				_signal 	> 	0)

	context_set(_context, "zone", 				_signal 	>= -100		and _signal		<= 100)

	context_set(_context, "signal", 			_signal)

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      Volume analytics
	//  ====================================================================================================================================================

use_volume(Contexts contexts) =>
    var Context	_context	=	context_create("volume")
    var             _low        =   volume
    var             _high       =   volume

    context_set(_context, "min",    false)
    context_set(_context, "max",    false)

    context_set(_context, "lower",  volume < volume[1])
    context_set(_context, "higher", volume > volume[1])

    context_set(_context, "size",   volume)

    if volume < _low
        context_set(_context, "min", true)
        _low:=  volume

    else if volume > _high
        context_set(_context, "max", true)
        _high:= volume

    if bool(ta.change(time('D')))
        _low:=  volume
        _high:= volume

    context_set(_context, "range",      _high - _low)
    context_set(_context, "percent",   (100 * volume) / ( _high - _low))

    use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      MACD
	//			- Default MACD, both MACD and signal is EMA based
	//  ====================================================================================================================================================

use_macd(Contexts contexts, simple int fast, simple int slow, simple int signal) =>
	var Context	_context			=	context_create("macd")

	[_macd, _signal, _histogram] = ta.macd(close, fast, slow, signal)

	context_set(_context, "macd",		_macd)
	context_set(_context, "signal",		_signal)
	context_set(_context, "histogram",	_histogram)

	context_set(_context, "macd.lt.zero",		_macd < 0)
	context_set(_context, "macd.gt.zero",		_macd > 0)
	context_set(_context, "signal.lt.zero",		_signal < 0)
	context_set(_context, "signal.gt.zero",		_signal > 0)
	context_set(_context, "lt.zero",			_macd < 0 and _signal < 0)
	context_set(_context, "gt.zero",			_macd > 0 and _signal > 0)
	context_set(_context, "histogram.lt.zero",	_histogram < 0)
	context_set(_context, "histogram.gt.zero",	_histogram > 0)
	context_set(_context, "macd.over.signal",	ta.crossover(_macd, _signal))
	context_set(_context, "macd.under.signal",	ta.crossunder(_macd, _signal))
	context_set(_context, "macd.over.zero",		ta.crossover(_macd, 0))
	context_set(_context, "macd.under.zero",	ta.crossunder(_macd, 0))
	context_set(_context, "signal.over.zero",	ta.crossover(_signal, 0))
	context_set(_context, "signal.under.zero",	ta.crossunder(_signal, 0))

	context_set(_context, "buy",	ta.crossover(_macd, _signal) and _macd < 0 and _signal < 0)
	context_set(_context, "sell",	ta.crossunder(_macd, _signal) and _macd > 0 and _signal > 0)

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      Improved SuperTrend
	//  ====================================================================================================================================================

import Electrified/SupportResitanceAndTrend/7 as super_trend_plus

use_super_trend2(Contexts contexts, simple int length, simple float multiple) =>
	var Context		_context		=	context_create("super-trend2")

	_result	= super_trend_plus.superTrend(multiple, length, "VAWMA", 2, 0)
	_trend = _result.trend

	context_set(_context, "trend",				_result.trend)
	context_set(_context, "uptrend.signal",		_result.up)
	context_set(_context, "downtrend.signal",	_result.dn)

	context_set(_context, "up",					_trend == 1)
	context_set(_context, "up.signal",			_trend == 1 ? _result.up : na)
	context_set(_context, "down",				_trend == -1)
	context_set(_context, "down.signal",		_trend == -1 ? _result.dn : na)

	context_set(_context, "warning",			_result.warning)
	context_set(_context, "hits",				_result.hitCount >= 1)

	context_set(_context, "buy",				_trend == 1 and _trend[1] == -1)
	context_set(_context, "sell",				_trend == -1 and _trend[1] == 1)

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      Simple Structure and POI detection
	//			This indicator tries to find interesting points, where a lot of candles "meet", potentially showing lows/highs/supports/resistances based
	//			on candles in the given line/zone.
	//  ====================================================================================================================================================

usepoi(Contexts contexts) =>
	var Context				_context		=	context_create("poi")

	use_context(contexts, _context)

//  ====================================================================================================================================================
//      PiPi Local code
//			All the stuff here is "proprietary" for PiPi, thus it's not "possible" to move those things into a lib.
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Inputs
	//			All the inputs needed by this indicator.
	//  ====================================================================================================================================================

// const string	group_structure		=	"- Structure -"
// var int			i_structure_length	=	input.int(		15,		"↔ Length",				minval = 3, group = group_structure, display = display.none, tooltip = "Length of structure tracking; bigger length means more candles tracked, so be careful, because this stuff may be heavy on resource usage.")

const string	group_macd			=	"- MACD -"
var int			i_macd_fast			=	input.int(	24,		"⏱Fast",					inline = "macd", group = group_macd, display = display.none)
var int			i_macd_slow			=	input.int(	52,		"☕Slow",					inline = "macd", group = group_macd, display = display.none)
var int			i_macd_signal		=	input.int(	18,		"📡Signal",					inline = "macd", group = group_macd, display = display.none)
var bool		i_macd_markers		=	input.bool(	false,	"Markers",					group = group_macd, display = display.none)

const string	group_cci			=	"- CCI -"
var int			i_cci_length		=	input.int(	30,		"↔ Length",					group = group_cci, display = display.none)
var bool		i_cci_markers		=	input.bool(	true,	"Markers",					group = group_cci, display = display.none)

const string	group_ema			=	"- EMA -"
var int			i_ema_length_1		=	input.int(		4,				"EMA #1",		group = group_ema, display = display.none,	inline = "ema1")
var color		i_ema_color_1		=	input.color(	color.green,	"",				group = group_ema, display = display.none,	inline = "ema1")

var int			i_ema_length_2		=	input.int(		8,				"EMA #2",		group = group_ema, display = display.none,	inline = "ema2")
var color		i_ema_color_2		=	input.color(	color.lime,	"",				group = group_ema, display = display.none,	inline = "ema2")

var int			i_ema_length_3		=	input.int(		12,				"EMA #3",		group = group_ema, display = display.none,	inline = "ema3")
var color		i_ema_color_3		=	input.color(	color.yellow,	"",				group = group_ema, display = display.none,	inline = "ema3")

var int			i_ema_length_4		=	input.int(		16,				"EMA #4",		group = group_ema, display = display.none,	inline = "ema4")
var color		i_ema_color_4		=	input.color(	color.orange,	"",				group = group_ema, display = display.none,	inline = "ema4")

var int			i_ema_length_5		=	input.int(		20,				"EMA #5",		group = group_ema, display = display.none,	inline = "ema5")
var color		i_ema_color_5		=	input.color(	color.fuchsia,	"",				group = group_ema, display = display.none,	inline = "ema5")

var int			i_ema_length_6		=	input.int(		24,				"EMA #6",		group = group_ema, display = display.none,	inline = "ema6")
var color		i_ema_color_6		=	input.color(	color.purple,	"",				group = group_ema, display = display.none,	inline = "ema6")

var bool		i_ema_background	=	input.bool(	true,	"🪣Background",				inline = "ema-bg", group = group_ema, display = display.none, tooltip = "Mark ordered EMAs:\nWhen green, signals are 1 > 6\nWhen red, signals are 1 < 6")
var color		i_ema_bg_green		=	input.color(	color.rgb(182, 233, 124, 95),	"",				inline = "ema-bg", group = group_ema, display = display.none)
var color		i_ema_bg_red		=	input.color(	color.rgb(139, 44, 76, 85),	"",				inline = "ema-bg", group = group_ema, display = display.none)

const string	group_super_trend2			=	"- SuperTrend 2 -"
var int			i_super_trend2_length		=	input.int(		30,		"↔ Length & Multiplier",		minval = 6, inline = "st2",	group = group_super_trend2, display = display.none)
var float		i_super_trend2_mutliplier	=	input.float(	1.5,	"",									minval = 0.5, step = 0.5, inline = "st2",	group = group_super_trend2, display = display.none)
var bool		i_super_trend2_show			=	input.bool(		true,	"Show",							inline = "st2-color", group = group_super_trend2, display = display.none)
var bool		i_super_trend2_fill			=	input.bool(		false,	"Fill",							inline = "st2-color", group = group_super_trend2, display = display.none)
var color		i_super_trend2_green		=	input.color(	color.rgb(134, 211, 255, 25),	"",		inline = "st2-color", group = group_super_trend2, display = display.none)
var color		i_super_trend2_red			=	input.color(	#e4a9ffbf,		"",		inline = "st2-color", group = group_super_trend2, display = display.none)
var color		i_super_trend2_yellow		=	input.color(	color.new(color.yellow, 25),	"",		inline = "st2-color", group = group_super_trend2, display = display.none)

_fibb_alpha	=	0
const string	group_day					=	"- Day Structure -"
var bool		i_day_level					=	input.bool(		true,			"📅 Day Low/High",		group = group_day, display = display.none,	inline = "day")
var color		i_day_high_color			=	input.color(	color.new(color.teal, 50),	"",			group = group_day, display = display.none,	inline = "day")
var color		i_day_low_color				=	input.color(	color.new(color.fuchsia, 50),	"",		group = group_day, display = display.none,	inline = "day")
var bool		i_day_fibb					=	input.bool(		true,			"Φ Fibbonachi",			group = group_day, display = display.none,	inline = "day-fibb",			tooltip = "Display day's low/high + it's fibbonachi levels; factor is fibbonachi level size")
var float		i_day_fibb_factor			=	input.float(	0.3,			"Factor",				group = group_day, display = display.none,	inline = "day-fibb", minval = 0, step = 0.01)
var color		i_day_fibb_color_1			=	input.color(	color.new(color.red,		_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_2			=	input.color(	color.new(color.yellow,	_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_3			=	input.color(	color.new(color.orange,	_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_4			=	input.color(	color.new(color.green,		_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_5			=	input.color(	color.new(color.teal,		_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_6			=	input.color(	color.new(color.aqua,		_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_7			=	input.color(	color.new(color.blue,		_fibb_alpha),	"",			group = group_day, display = display.none,	inline = "day-fibb-color")

	//  ====================================================================================================================================================
	//      Types specific for this system
	//  ====================================================================================================================================================

//	@type				This is a result from the main indicator fucntion
//	@field	contexts	All the contexts produced by the indicator
type Result
	Contexts    contexts

//  ---     Factory methods

result_create() =>
    Result.new(contexts_create())

	//  ====================================================================================================================================================
	//      Main Entry
	//			This is main entry point of this system; all the indicators, workflow, script parsing and so on are here.
	//
	//		I don't like this way, but this method is directly connected to inputs of this indicator as it's not possible in a nice way to pass them down
	//		properly.
	//  ====================================================================================================================================================

//	@function	Main entry point of this indicator; even without any plotting, it could be used for strategy testing using TradingView built-in tester
main() =>
	var Result          _result     =	result_create()
    Contexts        	_contexts   =   _result.contexts

    use_day              		(_contexts)
    use_day_fibbonachi   		(_contexts, i_day_fibb_factor)
    use_ema              		(_contexts, i_ema_length_1, i_ema_length_2, i_ema_length_3, i_ema_length_4, i_ema_length_5, i_ema_length_6)
    use_cci              		(_contexts, i_cci_length)
	use_volume					(_contexts)
	use_macd					(_contexts, i_macd_fast, i_macd_slow, i_macd_signal)
	use_super_trend2			(_contexts, i_super_trend2_length, i_super_trend2_mutliplier)

	_result

	//  ====================================================================================================================================================
	//      Main Entry execution
	//  ====================================================================================================================================================

_result		=	main()
_contexts	=	_result.contexts

	//  ====================================================================================================================================================
	//      Render day's low and high
	//  ====================================================================================================================================================
_plot_high	=	plot(contexts_get_level(_contexts, "day", "level").high,	style =	plot.style_steplinebr,	linewidth = 2,	display = i_day_level ? display.pane : display.none,	color = i_day_high_color,	title = "Day - Upper Level")
_plot_low	=	plot(contexts_get_level(_contexts, "day", "level").low,		style =	plot.style_steplinebr,	linewidth = 2,	display = i_day_level ? display.pane : display.none,	color = i_day_low_color,	title = "Day - Lower Level")

	//  ====================================================================================================================================================
	//      Render Fibbonachi levels
	//  ====================================================================================================================================================

if i_day_fibb
	level_render_zone("day-fibb-0",		contexts_get_level(_contexts,	"day-fibbonachi", "0"),		na, na, i_day_fibb_color_1, false)
// 	level_render_zone("day-fibb-20",	contexts_get_level(_contexts,	"day-fibbonachi", "20"),	na, na, i_day_fibb_color_2, false)
// 	level_render_zone("day-fibb-30",	contexts_get_level(_contexts,	"day-fibbonachi", "30"),	na, na, i_day_fibb_color_3, false)
// 	level_render_zone("day-fibb-50",	contexts_get_level(_contexts,	"day-fibbonachi", "50"),	na, na, i_day_fibb_color_4, false)
// 	level_render_zone("day-fibb-60",	contexts_get_level(_contexts,	"day-fibbonachi", "60"),	na, na, i_day_fibb_color_5, false)
// 	level_render_zone("day-fibb-70",	contexts_get_level(_contexts,	"day-fibbonachi", "70"),	na, na, i_day_fibb_color_6, false)
// 	level_render_zone("day-fibb-100",	contexts_get_level(_contexts,	"day-fibbonachi", "100"),	na, na, i_day_fibb_color_7, false)

	//  ====================================================================================================================================================
	//      SuperTrend 2
	//  ====================================================================================================================================================

_super_up_plot		=	plot(i_super_trend2_show ? contexts_get_float(_contexts, "super-trend2", "up.signal")	:	na,	style	=	plot.style_steplinebr,	linewidth	=	3,	color	=	contexts_get_bool(_contexts, "super-trend2", "hits")	?	i_super_trend2_yellow	:	i_super_trend2_green,	display = display.pane, editable = false)
_super_down_plot	=	plot(i_super_trend2_show ? contexts_get_float(_contexts, "super-trend2", "down.signal")	:	na,	style	=	plot.style_steplinebr,	linewidth	=	3,	color	=	contexts_get_bool(_contexts, "super-trend2", "hits")	?	i_super_trend2_yellow	:	i_super_trend2_red,		display = display.pane, editable = false)
_plot_ohlc			=	plot(ohlc4, title="OHLC4", style=plot.style_circles, display = display.none, editable = false)

fill(_plot_ohlc,	_super_up_plot,		color	=	i_super_trend2_fill and contexts_get_bool(_contexts, "super-trend2", "up")		? i_super_trend2_green	: na, title = "SuperTrend 2 - Uptrend")
fill(_plot_ohlc,	_super_down_plot,	color	=	i_super_trend2_fill and contexts_get_bool(_contexts, "super-trend2", "down")	? i_super_trend2_red	: na, title = "SuperTrend 2 - Downtrend")

	//  ====================================================================================================================================================
	//      Render EMA
	//  ====================================================================================================================================================

fill(_plot_low, _plot_high, i_ema_background and contexts_get_bool(_contexts, "ema", "1-6") ?	i_ema_bg_green	: na,	title = "EMA - Uptrend")
fill(_plot_low, _plot_high, i_ema_background and contexts_get_bool(_contexts, "ema", "6-1")	?	i_ema_bg_red	: na,	title = "EMA - Downtrend")

	//  ====================================================================================================================================================
	//      CCI markers
	//  ====================================================================================================================================================

_shape_size = size.small
plotshape(i_cci_markers and contexts_get_bool(_contexts, "cci", "below.exit"),		"CCI Below - Exit",		    style = shape.labelup,		size = _shape_size,  location = location.belowbar,	color = color.teal,         display = display.pane)
plotshape(i_cci_markers and contexts_get_bool(_contexts, "cci", "above.exit"),		"CCI Above - Exit",		    style = shape.labeldown,	size = _shape_size,  location = location.abovebar,	color = color.fuchsia,      display = display.pane)

plotshape(i_cci_markers and contexts_get_bool(_contexts, "cci", "below.enter"),		"CCI Below - Enter",		style = shape.labeldown,	size = _shape_size,  location = location.abovebar,	color = color.teal,         display = display.pane)
plotshape(i_cci_markers and contexts_get_bool(_contexts, "cci", "above.enter"),		"CCI Above - Enter",		style = shape.labelup,		size = _shape_size,  location = location.belowbar,	color = color.fuchsia,      display = display.pane)

	//  ====================================================================================================================================================
	//      MACD Markers
	//  ====================================================================================================================================================
