// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © marekhanzal

//@version=5
// strategy("PiPi", overlay = true, default_qty_value = 2, currency = currency.USD, pyramiding = 1, process_orders_on_close = false, initial_capital = 1000, max_lines_count = 500, max_bars_back = 4900, max_boxes_count = 500, max_labels_count = 500, calc_on_order_fills = false)
indicator("PiPi", overlay = true, max_lines_count = 500, max_bars_back = 4900, max_boxes_count = 500, max_labels_count = 500)

//  ====================================================================================================================================================
//      Library: Level
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Types
	//  ====================================================================================================================================================

//	@type			This is a level; because trading is not about exact numbers, Level is represented by a range (low and high); for a single line both can be the same value
//	@field	name	Level name used to programatically identify it's kind
//	@field	low		Level low value; for single value levels, both should be same
//	@field	high	Level high value; for single value levels, both should be same
//	@field	level	Level middle value
//	@field	size	Absolute diff between low and high
type Level
	string	name
	float	low
	float	high
	float	level
	float	size

	//	---		Factory methods

//	@function			Default level factory with low/high; level (middle) and size (high - low) is computed automatically
//	@param		name	Level name
//	@param		low		Low value (level size and middle is based on both low and high)
//	@param		high	High value (level size and middle is based on both low and high)
level_create(string name, float low, float high)		=>	Level.new(name, low, high, (high + low) / 2, math.abs(high - low))

//	@function	Creates "na" level
level_create()											=>  Level.new(na, na, na, na, na)

//	@function			Creates	level based on value and low/high based on the factor
//	@param		name	Level name
//	@param		level	Value
//	@param		size	Level size: low = level - size; high = level + size
level_size(string name, float level, float size)	=>	Level.new(name, level - size, level + size, level, size * 2)

	//  ====================================================================================================================================================
	//      Mutations
	//  ====================================================================================================================================================

//	@function	Sets new level low; also updates "level" and "size"
level_low(Level level, float low) =>
	if not na(level)
		level.low	:=	low
		level.level	:=	(level.high + level.low) / 2
		level.size	:=	math.abs(level.low - level.high)

//	@function	Sets new level high; also updates "level" and "size"
level_high(Level level, float high) =>
	if not na(level)
		level.high	:=	high
		level.level	:=	(level.high + level.low) / 2
		level.size	:=	math.abs(level.low - level.high)

//	@function	Set both low and high and updates "level" and "size"
level_low_high(Level level, float low, float high) =>
	level_low(level, low)
	level_high(level, high)

level_push(map<string, Level> levels, string name, Level level) =>
	levels.put(name, level)

//	@function	Push new level into levels map using "level" and "size"
level_push_size(map<string, Level> levels, string name, float level, float size) =>
	_level = level_size(name, level, size)
    levels.put(name, _level)
	_level

level_diff(string name, Level alpha, Level beta) => level_create(name, (alpha.low + beta.low) / 2, (alpha.high + beta.high) / 2)

	//  ====================================================================================================================================================
	//      Tools
	//  ====================================================================================================================================================

//	@function	Checks if the given value is inside a level
level_inside(Level level, float value) =>	value >= level.low and value <= level.high

	//  ====================================================================================================================================================
	//      Rendering
	//  ====================================================================================================================================================

//	@function			Simple function to render a level
//	@param		name	Explicit level name used to track rendering of primitives
//	@param		level	So, you want render a Level?
//	@param		index	Start index (bar_index)
//	@param		last	Last index; "na" for extend right
//	@param		color	Yes, color
//	@param		zone	Simple mode draws only single line (Levels "level"), otherwise all level lines are rendered (low, high, level)
level_render_zone(string name, Level level, int index, int last, color color, bool zone = false, string style = line.style_solid) =>
	var line	_line_low		=	na
	var line	_line_level		=	na
	var line	_line_high		=	na
	var box		_box			=	na

	line.delete(_line_low)
	line.delete(_line_level)
	line.delete(_line_high)

	box.delete(_box)

	if not na(level)
		_index	=	na(index)	? bar_index		: index
		_last	=	na(last)	? index + 1		: last
		_extend	=	na(last)	? extend.right	: extend.none
		_extend:=	na(last) and na(index) ? extend.both : _extend

		_line_level:=	line.new(_index,	level.level,	_last,	level.level,	style = style,	extend = _extend, color = color, width = 1)

		if zone
			_line_low	:=	line.new(_index,	level.low,	_last,	level.low, 		style = line.style_dotted,	extend = _extend, color = color, width = 1)
			_line_high	:=	line.new(_index,	level.high,	_last,	level.high,		style = line.style_dotted,	extend = _extend, color = color, width = 1)
			_box		:=	box.new(_index,		level.high,	_last,	level.low,									extend = _extend, border_color = na, border_width = na, bgcolor = color.new(color, 80))

	true

//  ====================================================================================================================================================
//      Library: Toolbox
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Utilities
	//  ====================================================================================================================================================

	//  --- Hack used to call block one time only, useful for setting up var arrays/maps which cannot be created in one statement

use_init() =>
	var bool	init	= true
	bool		_init	= init
	init:=	false

	_init

	//  ---		Somehow independent Fibbonachi level computation

fibbonachi(Level level, float factor = 0) =>
	_diff 		= math.abs(level.high - level.low)
	_base		= level.high
	_fibb		= map.new<string, Level>()

	_level_0	=	level_push_size(_fibb, "0", 		_base - (_diff * 0.000), factor)
	_level_20	=	level_push_size(_fibb, "20",		_base - (_diff * 0.236), factor)
	_level_30	=	level_push_size(_fibb, "30",		_base - (_diff * 0.382), factor)
	_level_50	=	level_push_size(_fibb, "50",		_base - (_diff * 0.500), factor)
	_level_60	=	level_push_size(_fibb, "60",		_base - (_diff * 0.618), factor)
	_level_70	=	level_push_size(_fibb, "70",		_base - (_diff * 0.786), factor)
	_level_100	=	level_push_size(_fibb, "100",		_base - (_diff * 1.000), factor)

	level_push(_fibb, "0-20",	level_diff("0-20",		_level_0,	_level_20))
	level_push(_fibb, "20-30",	level_diff("30-30",		_level_20,	_level_30))
	level_push(_fibb, "30-50",	level_diff("30-50",		_level_30,	_level_50))
	level_push(_fibb, "50-60",	level_diff("50-60",		_level_50,	_level_60))
	level_push(_fibb, "60-70",	level_diff("60-70",		_level_60,	_level_70))
	level_push(_fibb, "70-100",	level_diff("70-100",	_level_70,	_level_100))

	_fibb

//  ====================================================================================================================================================
//      Library: Context
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Types
	//  ====================================================================================================================================================

//	@type			Value represents PineScript's type accessible from PiPi Script; usually only one value should be set
//	@field	name	Represents any string value
//	@field	flag	Represents true/false state, for example uptrend, crossings or whatever
//	@field	value	Could be any static or computed value, for example day's price range
//	@field	level	Represents a level; could be a single number or (usually) a range
type Value
	string		_string
	bool	    _bool
	float		_float
	Level		_level

//	@type			Most important piece of this indicator - there are providers of a context, each managing it's internal state; Context is also used as a communication interface between providers and PiPi Script
//	@field	name	Name of a context, referenced from PiPi Script and providers
//	@field	value	Holds all the variables accessible from the PiPi script
type Context
	string					name
	map<string, Value>		value

//	@type			Just simple wrapper, so we can add contexts to an array
type Contexts
	map<string, Context>	map

	//  ---     Value Factory methods

value_create(string _string)								=>	Value.new(_string, na, na, na)
value_create(bool _bool)									=>	Value.new(na, _bool, na, na)
value_create(float _float)									=>	Value.new(na, na, _float, na)
value_create(Level _level)									=>	Value.new(na, na, na, _level)

	//			Value utility methods

//	@function	If "value" is "na", return "default"; just shorthand for a bit better readability
value_na(Value value, Value default)						=>	na(value) ? default : value
value_copy(Value value)										=>	na(value._level) ? value.copy() : value_create(value._level.copy())

	//  ---     Context Factory methods

context_create(string name)									=>  Context.new(name, map.new<string, Value>())
contexts_create()											=>  Contexts.new(map.new<string, Context>())

	//  ====================================================================================================================================================
	//      Context methods
	//  ====================================================================================================================================================

	//  ---     Context - Utilities

use_context(Contexts contexts, Context context)	=>
	contexts.map.put(context.name, context)
	context

context(Context context, Context default)	=>	na(context) ? default : context

contexts_context(Contexts contexts, string context) =>
	_context = contexts.map.contains(context) ? contexts.map.get(context) : context_create(context)
	contexts.map.put(context, _context)
	_context

	//  ---     Context - Setters

context_set(Context context, string name, Value value)		    =>
	context.value.put(name, value)
	value

context_set(Context context, string name, string value)		    =>
	context_set(context, name, value_create(value))
	value

context_set(Context context, string name, bool value)		    =>
	context_set(context, name, value_create(value))
	value

context_set(Context context, string name, float value)		    =>
	context_set(context, name, value_create(value))
	value

context_set(Context context, string name, Level value)			=>
	context_set(context, name, value_create(value))

	context_set(context, name + ".low",		value.low)
	context_set(context, name + ".high",	value.high)
	context_set(context, name + ".level",	value.level)
	context_set(context, name + ".size",	value.size)

	value

context_set(Context context, Level value)				    	=>
	context_set(context, value.name, value)

context_set(Context context, map<string, Level> levels)    		=>
	for [__name, __level] in levels
		context_set(context, __name, __level)

	levels

	//  ---     Contexts - Setters

contexts_set(Contexts contexts, string context, string name, string			value)	=>	context_set(contexts_context(contexts, context), name, value)
contexts_set(Contexts contexts, string context, string name, float			value)	=>	context_set(contexts_context(contexts, context), name, value)
contexts_set(Contexts contexts, string context, string name, bool			value)	=>	context_set(contexts_context(contexts, context), name, value)
contexts_set(Contexts contexts, string context, string name, Level			value)	=>	context_set(contexts_context(contexts, context), name, value)

	//  ---     Context - Getters

	//  Common getters

context_get			(Context context, string name, Value	default)		=>
	if not context.value.contains(name)
		log.warning("unknown value [{0}.{1}]", context.name, name)

	value_na(context.value.get(name), default)

context_get_string  (Context context, string name, string 		default	= na)		=>	context_get(	context, name,		value_create(default))._string
context_get_bool    (Context context, string name, bool			default	= na)		=>	context_get(	context, name,		value_create(default))._bool
context_get_float	(Context context, string name, float		default	= na)		=>	context_get(	context, name,		value_create(default))._float
context_get_int		(Context context, string name, int			default	= na)		=>	int(context_get(context, name,		value_create(default))._float)
context_get_level	(Context context, string name, Level		default	= na)	    =>	context_get(	context, name,		value_create(default))._level

	//  Contexts getters

contexts_get_string	(Contexts contexts, string context, string name, string			default	= na)	=>	context_get_string( context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_bool	(Contexts contexts, string context, string name, bool			default	= na)	=>	context_get_bool(   context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_float	(Contexts contexts, string context, string name, float			default	= na)	=>	context_get_float(  context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_int	(Contexts contexts, string context, string name, int 			default	= na)	=>	context_get_int(    context(contexts.map.get(context),	context_create(context)), name, default)
contexts_get_level	(Contexts contexts, string context, string name, Level			default	= na)	=>	context_get_level(  context(contexts.map.get(context),	context_create(context)), name, default)

	//  Context access getters

contexts_get_string(Contexts contexts, string[] value) =>
	switch value.size()
		1 =>	value.get(0)
		2 =>	contexts_get_string(contexts, value.get(0), value.get(1))

contexts_get_bool(Contexts contexts, string[] value) =>
	switch value.size()
		1 =>
			switch value.get(0)
				"true"	=> true
				"false"	=> false
				=> na

		2 => contexts_get_bool(contexts, value.get(0), value.get(1))

contexts_get_float(Contexts contexts, string[] value) =>
	switch value.size()
		1 =>	str.tonumber(value.get(0))
		2 =>	contexts_get_float(contexts, value.get(0), value.get(1))
		3 =>	contexts_get_float(contexts, value.get(0), value.get(1)) * str.tonumber(value.get(2))

//  ====================================================================================================================================================
//      Library: source
//			Here are all sources (contexts providers) for PiPi
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Day-Low-High provider
	//  ====================================================================================================================================================

//	@function	Manages context of current Day Low/High and related events
use_day(Contexts contexts) =>
	var Context		_context	=	context_create("day")
	var	Level		_level		=	level_create("day", low, high)

	context_set(_context, "change",			false)
	context_set(_context, "new-day",		false)
	context_set(_context, "higher-high",	false)
	context_set(_context, "lower-low",		false)
	context_set(_context, "level",			_level)

	if bool(ta.change(time('D')))
		level_low_high(_level, low, high)

		context_set(_context, "change",			true)
		context_set(_context, "new-day",		true)
		context_set(_context, "level",			_level)

	else if low < _level.low
		level_low(_level, low)

		context_set(_context, "change",			true)
		context_set(_context, "lower-low",		true)
		context_set(_context, "level", 			_level)

	else if high > _level.high
		level_high(_level, high)

		context_set(_context, "change",			true)
		context_set(_context, "higher-high",	true)
		context_set(_context, "level",			_level)

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      Day-Low-High Fibbonachi provider
	//  ====================================================================================================================================================

//	@function	Listens for changes of Day Low/High and adjusts Fibbonachi levels accordingly
use_day_fibbonachi(Contexts contexts, float size) =>
	var Context	_context	=	context_create("day-fibbonachi")
	Level		_level		=	contexts_get_level(contexts, "day", "level")

	//	We don't want to execute Fibb computation on every bar - don't waste TradingView's resources on the same computations
	if use_init()
		context_set(_context, fibbonachi(_level, size))

	//	Same here - we're computing day's fibbonachi, so listen for changes comming from "use_day_low_high" or who provides the vallues
	if contexts_get_bool(contexts, "day", "change")
		context_set(_context, fibbonachi(_level, size))

	use_context(contexts, _context)

	//  ====================================================================================================================================================
	//      Simple Structure and POI detection
	//			This indicator tries to find interesting points, where a lot of candles "meet", potentially showing lows/highs/supports/resistances based
	//			on candles in the given line/zone.
	//  ====================================================================================================================================================

use_poi(Contexts contexts, int short_length, float short_size, int short_count, int short_offset, color short_color, int long_length, float long_size, int long_count, int long_offset, color long_color) =>
	var Context		_context			=	context_create("poi")
	Level			_level_short	=	level_size("short",		close, short_size)
	Level			_level_long		=	level_size("long",		close, long_size)
	int				_count				=	0

	_count:=	0
	if short_length > 0 and barstate.islast
		for int __index = short_offset to short_length
			Level 	__match	=	na

			if level_inside(_level_short, open[__index]) or level_inside(_level_short, close[__index])
				_count	+=	1
				__match	:=	_level_short

			if not na(__match) and _count >= short_count
				level_render_zone("poi-short", __match, bar_index - __index, bar_index, short_color, true)
				break

	_count:=	0
	if long_length > 0 and barstate.islast
		for int __index = long_offset to long_length
			Level 	__match	=	na

			if level_inside(_level_long, open[__index]) or level_inside(_level_long, close[__index])
				_count	+=	1
				__match	:=	_level_long

			if not na(__match) and _count >= long_count
				level_render_zone("poi-long", __match, na, na, long_color, true)
				break

	use_context(contexts, _context)

use_rotation(Contexts contexts, int length, float size, int count, color color) =>
	var Context	_context	=	context_create("rotation")
	Level		_level		=	level_create("rotation", low - size, high + size)
	Level 		_match		=	na

	_count	=	0
	for int __index	= 0 to length
		if level_inside(_level, open[__index]) and level_inside(_level, close[__index])
			_count	+=	1
			_match	:=	_level
		else
			break

	if not na(_match) and _count >= count
		level_render_zone("rotation", _match, bar_index - (_count - 1), bar_index, color, true)

	use_context(contexts, _context)

use_day_candles(Contexts contexts) =>
	var Context	_context		=	context_create("day-candles")
	var int		_count			=	0
	var int		_fibb_0_20		=	0
	var int		_fibb_20_30		=	0
	var int		_fibb_30_50		=	0
	var int		_fibb_50_60		=	0
	var int		_fibb_60_70		=	0
	var int		_fibb_70_100	=	0

	float		_bottom		=	math.min(open, close)
	float		_top		=	math.max(open, close)

	Level		_fibb_0		=	contexts_get_level(contexts, "day-fibbonachi", "0")
	Level		_fibb_20	=	contexts_get_level(contexts, "day-fibbonachi", "20")
	Level		_fibb_30	=	contexts_get_level(contexts, "day-fibbonachi", "30")
	Level		_fibb_50	=	contexts_get_level(contexts, "day-fibbonachi", "50")
	Level		_fibb_60	=	contexts_get_level(contexts, "day-fibbonachi", "60")
	Level		_fibb_70	=	contexts_get_level(contexts, "day-fibbonachi", "70")
	Level		_fibb_100	=	contexts_get_level(contexts, "day-fibbonachi", "100")

	if bool(ta.change(time('D')))
		_count			:=	0
		_fibb_0_20		:=	0
		_fibb_20_30		:=	0
		_fibb_30_50		:=	0
		_fibb_50_60		:=	0
		_fibb_60_70		:=	0
		_fibb_70_100	:=	0

	if (_bottom		>=	_fibb_20.level and _bottom <= _fibb_0.level) or (_top	>=	_fibb_20.level and _top <= _fibb_0.level)
		_count		+=	1
		_fibb_0_20	+=	1

	if (_bottom		>=	_fibb_30.level and _bottom <= _fibb_20.level) or (_top	>=	_fibb_30.level and _top <= _fibb_20.level)
		_count		+=	1
		_fibb_20_30	+=	1

	if (_bottom		>=	_fibb_50.level and _bottom <= _fibb_30.level) or (_top	>=	_fibb_50.level and _top <= _fibb_30.level)
		_count		+=	1
		_fibb_30_50	+=	1

	if (_bottom		>=	_fibb_60.level and _bottom <= _fibb_50.level) or (_top	>=	_fibb_60.level and _top <= _fibb_50.level)
		_count		+=	1
		_fibb_50_60	+=	1

	if (_bottom		>=	_fibb_70.level and _bottom <= _fibb_60.level) or (_top	>=	_fibb_70.level and _top <= _fibb_60.level)
		_count		+=	1
		_fibb_60_70	+=	1

	if (_bottom		>=	_fibb_100.level and _bottom <= _fibb_70.level) or (_top	>=	_fibb_100.level and _top <= _fibb_70.level)
		_count			+=	1
		_fibb_70_100	+=	1

	context_set(_context, "count",	_count)
	context_set(_context, "0-20",	_fibb_0_20)
	context_set(_context, "20-30",	_fibb_20_30)
	context_set(_context, "30-50",	_fibb_30_50)
	context_set(_context, "50-60",	_fibb_50_60)
	context_set(_context, "60-70",	_fibb_60_70)
	context_set(_context, "70-100",	_fibb_70_100)

	use_context(contexts, _context)

//  ====================================================================================================================================================
//      PiPi Local code
//			All the stuff here is "proprietary" for PiPi, thus it's not "possible" to move those things into a lib.
//  ====================================================================================================================================================

	//  ====================================================================================================================================================
	//      Inputs
	//			All the inputs needed by this indicator.
	//  ====================================================================================================================================================

const string	group_poi_short		=	"- Point-of-Interest: Short -"
var int			i_poi_short_length	=	input.int(		30,			"Length",			minval = 0, 	group = group_poi_short, display = display.none)
var float		i_poi_short_size	=	input.float(	0.1,		"Size",				minval = 0.05, step = 0.05, group = group_poi_short, display = display.none)
var int			i_poi_short_count	=	input.int(		3,			"Count",			minval = 1, 	group = group_poi_short, display = display.none)
var int			i_poi_short_offset	=	input.int(		2,			"Offset",			minval = 2, 	group = group_poi_short, display = display.none)
var color		i_poi_short_color	=	input.color(	#FFA726,	"Color",	group = group_poi_short, display = display.none)

const string	group_poi_long		=	"- Point-of-Interest: Long -"
var int			i_poi_long_length	=	input.int(		0,		"Length",	minval = 0, 				group = group_poi_long, display = display.none, tooltip = "Set long distance detection:\nLength - number of bars of lookback\nSize - Detection tolerance\nOffset - How many bars to skip before starting match\nColor. Yes, color. You know that")
var float		i_poi_long_size		=	input.float(	0.2,	"Size",		minval = 0.05, step = 0.05, group = group_poi_long, display = display.none)
var int			i_poi_long_count	=	input.int(		10,		"Count",	minval = 1, 				group = group_poi_long, display = display.none)
var int			i_poi_long_offset	=	input.int(		0,		"Offset",	minval = 0, 				group = group_poi_long, display = display.none)
var color		i_poi_long_color	=	input.color(	color.maroon,	"Color",					group = group_poi_long, display = display.none)

const string	group_rotation		=	"- Rotation -"
var int			i_rotation_length	=	input.int(		15,		"Length",		minval = 0, 					group = group_rotation, display = display.none)
var float		i_rotation_size		=	input.float(	0.75,	"Size",			minval = 0.05, step = 0.05,		group = group_rotation, display = display.none)
var int			i_rotation_count	=	input.int(		4,		"Count",		minval = 1, 					group = group_rotation, display = display.none)
var color		i_rotation_color	=	input.color(	color.gray,	"Color",					group = group_rotation, display = display.none)

const string	group_day					=	"- Day Structure -"
var bool		i_day_level					=	input.bool(		false,			"📅 Day Low/High",			group = group_day, display = display.none,	inline = "day")
var color		i_day_high_color			=	input.color(	color.new(color.teal, 50),	"",				group = group_day, display = display.none,	inline = "day")
var color		i_day_low_color				=	input.color(	color.new(color.fuchsia, 50),	"",			group = group_day, display = display.none,	inline = "day")
var bool		i_day_fibb					=	input.bool(		true,			"Φ Fibbonachi",				group = group_day, display = display.none,	tooltip = "Display day's low/high + it's fibbonachi levels; factor is fibbonachi level size")
var bool		i_day_fibb_middles			=	input.bool(		true,			"Φ Fibbonachi Middles",		inline = "fibb-midd", group = group_day, display = display.none,	tooltip = "Display fibbonachi middle lines")
var float		i_day_fibb_size				=	input.float(	1,				"Size",						minval = 0, step = 0.05,		group = group_day, display = display.none, tooltip = "Define fibbonachi level size for another indicators")
var bool		i_day_fibb_zone				=	input.bool(		false,			"Show zone",				group = group_day, display = display.none,	tooltip = "Show levels as a zones")
var color		i_day_fibb_middles_color	=	input.color(	#255BB8,	"",			inline = "fibb-midd", group = group_day, display = display.none)
var color		i_day_fibb_color_1			=	input.color(	#4CAF50,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_2			=	input.color(	#66BB6A,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_3			=	input.color(	#A5D6A7,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_4			=	input.color(	#9C27B0,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_5			=	input.color(	#FAA1A4,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_6			=	input.color(	#F7525F,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")
var color		i_day_fibb_color_7			=	input.color(	#F23645,	"",			group = group_day, display = display.none,	inline = "day-fibb-color")

const string	group_session				=	"- Session -"
var string		i_session_1_time			=	input.string(	"1500-2000",					"Session #1",	inline = "session-1", group = group_session, display = display.none)
var color		i_session_1_color			=	input.color(	color.new(color.aqua, 95),		"",				inline = "session-1", group = group_session, display = display.none)
var string		i_session_2_time			=	input.string(	"2200-1100",					"Session #2",	inline = "session-2", group = group_session, display = display.none)
var color		i_session_2_color			=	input.color(	color.new(color.gray, 95),		"",				inline = "session-2", group = group_session, display = display.none)

bool	_session_1	=	bool(time(timeframe.period, i_session_1_time))
bool	_session_2	=	bool(time(timeframe.period, i_session_2_time))

	//  ====================================================================================================================================================
	//      Main Entry
	//			This is main entry point of this system; all the indicators, workflow, script parsing and so on are here.
	//
	//		I don't like this way, but this method is directly connected to inputs of this indicator as it's not possible in a nice way to pass them down
	//		properly.
	//  ====================================================================================================================================================

//	@function	Main entry point of this indicator; even without any plotting, it could be used for strategy testing using TradingView built-in tester
main() =>
    Contexts	_contexts   =   contexts_create()

    use_day              		(_contexts)
    use_day_fibbonachi   		(_contexts, i_day_fibb_size)
	use_poi						(_contexts, i_poi_short_length, i_poi_short_size, i_poi_short_count, i_poi_short_offset, i_poi_short_color, i_poi_long_length, i_poi_long_size, i_poi_long_count, i_poi_long_offset, i_poi_long_color)
	use_rotation				(_contexts, i_rotation_length, i_rotation_size, i_rotation_count, i_rotation_color)
	use_day_candles				(_contexts)

	_contexts

	//  ====================================================================================================================================================
	//      Main Entry execution
	//  ====================================================================================================================================================

_contexts	=	main()

_shape_size		=	size.small
_label_alpha	=	75

	//  ====================================================================================================================================================
	//      Render day's low and high
	//  ====================================================================================================================================================
_high		=	contexts_get_level(_contexts, "day", "level").high
_low		=	contexts_get_level(_contexts, "day", "level").low
_middle		=	(_high + _low) / 2
_plot_high	=	plot(_high,	style =	plot.style_steplinebr,	linewidth = 2,	display = i_day_level ? display.pane : display.none,	color = i_day_high_color,	title = "Day - Upper Level")
_plot_low	=	plot(_low,	style =	plot.style_steplinebr,	linewidth = 2,	display = i_day_level ? display.pane : display.none,	color = i_day_low_color,	title = "Day - Lower Level")

	//  ====================================================================================================================================================
	//      Render Fibbonachi levels
	//  ====================================================================================================================================================

_fibb_20	=	contexts_get_level(_contexts,	"day-fibbonachi", "20")
_fibb_70	=	contexts_get_level(_contexts,	"day-fibbonachi", "70")

if i_day_fibb
	color	_middle_color	=	i_day_fibb_middles_color
	string	_middle_style	=	line.style_dotted
	bool	_level_zone		=	i_day_fibb_zone

	level_render_zone("day-fibb-0",			contexts_get_level(_contexts,	"day-fibbonachi", "0"),		na, na, i_day_fibb_color_1, _level_zone)
	level_render_zone("day-fibb-20",		_fibb_20,													na, na, i_day_fibb_color_2, _level_zone)
	level_render_zone("day-fibb-30",		contexts_get_level(_contexts,	"day-fibbonachi", "30"),	na, na, i_day_fibb_color_3, _level_zone)
	level_render_zone("day-fibb-50",		contexts_get_level(_contexts,	"day-fibbonachi", "50"),	na, na, i_day_fibb_color_4, _level_zone)
	level_render_zone("day-fibb-60",		contexts_get_level(_contexts,	"day-fibbonachi", "60"),	na, na, i_day_fibb_color_5, _level_zone)
	level_render_zone("day-fibb-70",		_fibb_70,													na, na, i_day_fibb_color_6, _level_zone)
	level_render_zone("day-fibb-100",		contexts_get_level(_contexts,	"day-fibbonachi", "100"),	na, na, i_day_fibb_color_7, _level_zone)

	if i_day_fibb_middles
		level_render_zone("day-fibb-0-20",		contexts_get_level(_contexts,	"day-fibbonachi", "0-20"),		na, na, _middle_color,		_level_zone, _middle_style)
		level_render_zone("day-fibb-0-20",		contexts_get_level(_contexts,	"day-fibbonachi", "20-30"),		na, na, _middle_color,		_level_zone, _middle_style)
		level_render_zone("day-fibb-30-50",		contexts_get_level(_contexts,	"day-fibbonachi", "30-50"),		na, na, _middle_color,		_level_zone, _middle_style)
		level_render_zone("day-fibb-50-60",		contexts_get_level(_contexts,	"day-fibbonachi", "50-60"),		na, na, _middle_color,		_level_zone, _middle_style)
		level_render_zone("day-fibb-60-70",		contexts_get_level(_contexts,	"day-fibbonachi", "60-70"),		na, na, _middle_color,		_level_zone, _middle_style)
		level_render_zone("day-fibb-70-100",	contexts_get_level(_contexts,	"day-fibbonachi", "70-100"),	na, na, _middle_color,		_level_zone, _middle_style)

	//  ====================================================================================================================================================
	//      Session markers
	//  ====================================================================================================================================================

bgcolor(_session_1 ? i_session_1_color : na)
bgcolor(_session_2 ? i_session_2_color : na)

	//  ====================================================================================================================================================
	//      Info table
	//  ====================================================================================================================================================

var table	_table	=	table.new(position.bottom_center, 7, 4)
if barstate.islast
	_range		=	_high - _low
	_percent	=	(100 * (close - _low)) / (_high - _low)
	_percent_20	=	(100 * (_fibb_20.level - _low)) / (_high - _low)
	_percent_70	=	(100 * (_fibb_70.level - _low)) / (_high - _low)

	_color		=	_percent	<=	100				?	color.lime		:	na
	_color		:=	_percent	<=	_percent_20		?	color.green	:	_color
	_color		:=	_percent	<=	50				?	color.orange	:	_color
	_color		:=	_percent	<=	_percent_70		?	color.red		:	_color

	table.cell(_table, 3, 0, str.format("{0, number} / {1, number} ({2,number,0.0}%)", close - _low, _range, _percent), text_color = _color)

	_fibb_width			=	4
	_candle_count		=	contexts_get_int(_contexts, "day-candles", "count")

	_count_0_20			=	contexts_get_int(_contexts, "day-candles", "0-20")
	_count_20_30		=	contexts_get_int(_contexts, "day-candles", "20-30")
	_count_30_50		=	contexts_get_int(_contexts, "day-candles", "30-50")
	_count_50_60		=	contexts_get_int(_contexts, "day-candles", "50-60")
	_count_60_70		=	contexts_get_int(_contexts, "day-candles", "60-70")
	_count_70_100		=	contexts_get_int(_contexts, "day-candles", "70-100")

	//	---

	_row_info	=	1
	table.cell(_table, 0, _row_info, "0 - 20",		width = _fibb_width,	text_color = i_day_fibb_color_1)
	table.cell(_table, 1, _row_info, "20 - 30",		width = _fibb_width,	text_color = i_day_fibb_color_2)
	table.cell(_table, 2, _row_info, "30 - 50",		width = _fibb_width,	text_color = i_day_fibb_color_3)

	table.cell(_table, 3, _row_info, "Count",		width = _fibb_width,	text_color = color.orange)

	table.cell(_table, 4, _row_info, "50 - 60",		width = _fibb_width,	text_color = i_day_fibb_color_5)
	table.cell(_table, 5, _row_info, "60 - 70",		width = _fibb_width,	text_color = i_day_fibb_color_6)
	table.cell(_table, 6, _row_info, "70 - 100",	width = _fibb_width,	text_color = i_day_fibb_color_7)

	//	---

	_row_counts	=	2
	table.cell(_table, 0, _row_counts, str.format("{0, number}", _count_0_20),		width = _fibb_width,	text_color = i_day_fibb_color_1)
	table.cell(_table, 1, _row_counts, str.format("{0, number}", _count_20_30),		width = _fibb_width,	text_color = i_day_fibb_color_2)
	table.cell(_table, 2, _row_counts, str.format("{0, number}", _count_30_50),		width = _fibb_width,	text_color = i_day_fibb_color_3)

	table.cell(_table, 3, _row_counts, str.format("{0, number}", _candle_count), 	width = _fibb_width,	text_color = color.orange)

	table.cell(_table, 4, _row_counts, str.format("{0, number}", _count_50_60),		width = _fibb_width,	text_color = i_day_fibb_color_5)
	table.cell(_table, 5, _row_counts, str.format("{0, number}", _count_60_70),		width = _fibb_width,	text_color = i_day_fibb_color_6)
	table.cell(_table, 6, _row_counts, str.format("{0, number}", _count_70_100),	width = _fibb_width,	text_color = i_day_fibb_color_7)

	//	----

	_row_percent	=	3

	_percent_0_20	=	100 * _count_0_20 / _candle_count
	_percent_20_30	=	100 * _count_20_30 / _candle_count
	_percent_30_50	=	100 * _count_30_50 / _candle_count

	_percent_50_60	=	100 * _count_50_60 / _candle_count
	_percent_60_70	=	100 * _count_60_70 / _candle_count
	_percent_70_100	=	100 * _count_70_100 / _candle_count

	_score_high		=	4
	_score_middle	=	1.5
	_score_low		=	0.5

	_long_power		=	((_percent_0_20 * _score_high) + (_percent_20_30 * _score_middle) + (_percent_30_50 * _score_low)) / 3
	_short_power	=	((_percent_50_60 * _score_low) + (_percent_60_70 * _score_middle) + (_percent_70_100 * _score_high)) / 3

	table.cell(_table, 0, _row_percent, str.format("{0,number,0.0}%", _percent_0_20),	width = _fibb_width,	text_color = i_day_fibb_color_1)
	table.cell(_table, 1, _row_percent, str.format("{0,number,0.0}%", _percent_20_30),	width = _fibb_width,	text_color = i_day_fibb_color_2)
	table.cell(_table, 2, _row_percent, str.format("{0,number,0.0}%", _percent_30_50),	width = _fibb_width,	text_color = i_day_fibb_color_3)

	table.cell(_table, 3, _row_percent, str.format("{0,number,0.0} : {1,number,0.0}", _long_power, _short_power),	width = _fibb_width,	text_color = _long_power > _short_power ? color.green : color.red)

	table.cell(_table, 4, _row_percent, str.format("{0,number,0.0}%", _percent_50_60),	width = _fibb_width,	text_color = i_day_fibb_color_5)
	table.cell(_table, 5, _row_percent, str.format("{0,number,0.0}%", _percent_60_70),	width = _fibb_width,	text_color = i_day_fibb_color_6)
	table.cell(_table, 6, _row_percent, str.format("{0,number,0.0}%", _percent_70_100),	width = _fibb_width,	text_color = i_day_fibb_color_7)
