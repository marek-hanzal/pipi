// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © marekhanzal

//@version=5

// @description This library contains all supported indicators/context sources for PiPi
library("PiPi2_Source", overlay = true)

//  ====================================================================================================================================================
//      Dependencies
//  ====================================================================================================================================================

//	---		PiPi dependencies

import TradingView/ta/7				as	ta7
import marekhanzal/PiPi2_Context/4	as	ctx
import marekhanzal/PiPi2_Level/2	as	lvl
import marekhanzal/PiPi2_Toolbox/2	as	toolbox

//	---		External dependencies

import Electrified/SupportResitanceAndTrend/7 as super_trend_plus

//  ====================================================================================================================================================
//      Default global values
//			-	here should be all defaults for all indicators currently supported (so if you modify this script, your default should be here).
//  ====================================================================================================================================================

export use_defaults(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("ctx")

	if toolbox.use_init()
		ctx.context_set(_context,	"factor",				    0.1)

        ctx.context_set(_context,	"session.time",             "1000-2200")
        ctx.context_set(_context,	"session.exclusive",        true)

		ctx.context_set(_context,	"structure.length",		    20)
		ctx.context_set(_context,	"structure.deviation",	    0)

        ctx.context_set(_context,	"cci.length",               7)

        ctx.context_set(_context,	"macd2.length",		        34)
        ctx.context_set(_context,	"macd2.signal",		        9)
        ctx.context_set(_context,	"macd2.impulse",            3)
        ctx.context_set(_context,	"macd2.dmz",                6.6)
        ctx.context_set(_context,	"macd2.flat",               0.1)

        ctx.context_set(_context,	"ema.length-1",             20)
        ctx.context_set(_context,	"ema.length-2",             50)
        ctx.context_set(_context,	"ema.length-3",             200)

		ctx.context_set(_context,	"trends.factor",		    0.2)
		ctx.context_set(_context,	"trends.touches",		    3)
		ctx.context_set(_context,	"trends.count",			    3)
		ctx.context_set(_context,	"trends.trend",			    3)

        ctx.context_set(_context,	"super-trend.fast-length",  7)
        ctx.context_set(_context,	"super-trend.fast-factor",  1)
        ctx.context_set(_context,	"super-trend.slow-length",  20)
        ctx.context_set(_context,	"super-trend.slow-factor",  5)

		ctx.context_set(_context,	"atr-signal.length",		20)
		ctx.context_set(_context,	"atr-signal.factor",		3)

	//	Reset default global flags
	ctx.context_set(_context,	"buy",	false)
	ctx.context_set(_context,	"sell",	false)

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Candle source provider
//  ====================================================================================================================================================

//  ---     Candle values and simple candle analysis
//          This function provides common candle information plus some additional structural info

export use_candle(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("candle")

	_is_green	=	open	<= close
	_is_red		=	open	> close
	_low		=	math.min(open, close)
	_high		=	math.max(open, close)
	_body		=	_high - _low

	ctx.context_set(_context, "index",			bar_index)
	ctx.context_set(_context, "green",			_is_green)
	ctx.context_set(_context, "red",			_is_red)
	ctx.context_set(_context, "bull-engulfing",	_is_green	and	high	> high[1]	and (_body > _body[1]))
	ctx.context_set(_context, "bear-engulfing",	_is_red		and	low		> low[1]	and	(_body > _body[1]))

	ctx.context_set(_context, "open-gt-open",	open	> open[1])
	ctx.context_set(_context, "high-gt-high",	high	> high[1])
	ctx.context_set(_context, "low-gt-low",		low		> low[1])
	ctx.context_set(_context, "close-gt-close",	close	> close[1])

	ctx.context_set(_context, "open-lt-open",	open	< open[1])
	ctx.context_set(_context, "high-lt-high",	high	< high[1])
	ctx.context_set(_context, "low-lt-low",		low		< low[1])
	ctx.context_set(_context, "close-lt-close",	close	< close[1])

	ctx.context_set(_context, "body-gt-body",	_body > _body[1])
	ctx.context_set(_context, "body-lt-body",	_body < _body[1])

	ctx.context_set(_context, "up",				_low > _low[1])
	ctx.context_set(_context, "down",			_low < _low[1])

	ctx.context_set(_context, "open",			open)
	ctx.context_set(_context, "high",			high)
	ctx.context_set(_context, "low",			low)
	ctx.context_set(_context, "close",			close)
	ctx.context_set(_context, "size",			_body)
	ctx.context_set(_context, "length",			high - low)

	ctx.context_set(_context, "bottom",			_low)
	ctx.context_set(_context, "top",			_high)

	ctx.use_context(contexts, _context)

//  ---     Current candle Levels
//          Some indicators exports levels and this method provides some basic flags related to the Level and Candle

export use_candle_levels(ctx.Contexts contexts) =>
	const string	_separator	=	"."
	ctx.Context		_context	=	contexts.map.get("candle")

	for [__name, __context] in contexts.map
		for [__name2, __value] in __context.value
			if not na(__value._level)
				_level	=	__value._level
				_key	=	__name + _separator + __name2

				//	--	Precomputed flags; a lot of stuff may be used by hand, it's just more talkative
				ctx.context_set(_context, _key + _separator + "above",			open 	> _level.high 	and close 	> _level.high)
				ctx.context_set(_context, _key + _separator + "below",			open 	< _level.low 	and close 	< _level.low)

				ctx.context_set(_context, _key + _separator + "inside-open",	lvl.inside(_level, open))
				ctx.context_set(_context, _key + _separator + "inside-high",	lvl.inside(_level, high))
				ctx.context_set(_context, _key + _separator + "inside-low",		lvl.inside(_level, low))
				ctx.context_set(_context, _key + _separator + "inside-close",	lvl.inside(_level, close))

				ctx.context_set(_context, _key + _separator + "body-over",		math.min(open, close)	< _level.low 	and math.max(open, close) 	> _level.high)
				ctx.context_set(_context, _key + _separator + "body-inside",	math.min(open, close)	> _level.low 	and math.max(open, close) 	< _level.high)
				ctx.context_set(_context, _key + _separator + "wicks-over",		low						< _level.low 	and high 					> _level.high)

//  ====================================================================================================================================================
//      Day-Low-High provider
//  ====================================================================================================================================================

//	@function	DRY, bro
factor(ctx.Contexts contexts, lvl.Level level) =>
	(level.size * (ctx.contexts_get_float(contexts, "ctx", "factor") / 10)) / 2

//	@function	Manages context of current Day Low/High and related events
export use_day(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("day")
	var	lvl.Level	_level		=	lvl.create("day", low, high)

	if toolbox.use_init()
		ctx.context_set(_context, "level",	_level)
		ctx.context_set(_context, "factor",	factor(contexts, _level))

	ctx.context_set(_context, "change",			false)
	ctx.context_set(_context, "new-day",		false)
	ctx.context_set(_context, "higher-high",	false)
	ctx.context_set(_context, "lower-low",		false)

	if bool(ta.change(time('D')))
		lvl.low_high(_level, low, high)

		ctx.context_set(_context, "change",			true)
		ctx.context_set(_context, "new-day",		true)

		ctx.context_set(_context, "factor",			factor(contexts, _level))
		ctx.context_set(_context, "size",			_level.size)
		ctx.context_set(_context, "level",			_level)

	else if low < _level.low
		lvl.low(_level, low)

		ctx.context_set(_context, "change",			true)
		ctx.context_set(_context, "lower-low",		true)

		ctx.context_set(_context, "factor",			factor(contexts, _level))
		ctx.context_set(_context, "size",			_level.size)
		ctx.context_set(_context, "level", 			_level)

	else if high > _level.high
		lvl.high(_level, high)

		ctx.context_set(_context, "change",			true)
		ctx.context_set(_context, "higher-high",	true)

		ctx.context_set(_context, "factor",			factor(contexts, _level))
		ctx.context_set(_context, "size",			_level.size)
		ctx.context_set(_context, "level",			_level)

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Day-Low-High Fibbonachi provider
//  ====================================================================================================================================================

//	@function	Listens for changes of Day Low/High and adjusts Fibbonachi levels accordingly
export use_day_fibbonachi(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("day-fibbonachi")
	lvl.Level		_level		=	ctx.contexts_get_level(contexts, "day", "level")
	float			_factor		=	ctx.contexts_get_float(contexts, "day", "factor", 0)

	//	We don't want to execute Fibb computation on every bar - don't waste TradingView's resources on the same computations
	if toolbox.use_init()
		ctx.context_set(_context, toolbox.fibbonachi(_level, _factor))

	//	Same here - we're computing day's fibbonachi, so listen for changes comming from "use_day_low_high" or who provides the vallues
	if ctx.contexts_get_bool(contexts, "day", "change")
		ctx.context_set(_context, toolbox.fibbonachi(_level, _factor))

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Structures
//			-	Local structure provider
//  ====================================================================================================================================================

export use_structure(ctx.Contexts contexts) =>
	var ctx.Context			_context		=	ctx.context_create("structure")
	var float[]		    	_levels     	=	array.new<float>()
	map<string, lvl.Level>	_structure		=	map.new<string, lvl.Level>()
	var int					_i_length		=	ctx.contexts_get_int(	contexts, "ctx", "structure.length")
	var float				_i_deviation	=	ctx.contexts_get_int(	contexts, "ctx", "structure.deviation")
	var int					_lowest     	=	1
	var int					_highest    	=	1
	float					_level_low		=	na
	float					_level_high		=	na

	if toolbox.use_init()
		ctx.context_set(_context, "low",	ctx.value_create(lvl.create()))
		ctx.context_set(_context, "high",	ctx.value_create(lvl.create()))

	ctx.context_set(_context, "change", false)

	_deviation   	= _i_deviation * syminfo.mintick
	_lowest_depth	= -ta.lowestbars(_i_length)
	_highest_depth  = -ta.highestbars(_i_length)

	_lowest          += 1
	_highest         += 1

	_trend			= ta.barssince(not (_highest == _highest_depth or high[_highest_depth] - high > _deviation)) > ta.barssince(not (_lowest == _lowest_depth or low - low[_lowest_depth] > _deviation))

	if _lowest != _lowest_depth and (not _trend[1] or low[_lowest] > low[_lowest_depth])
		_lowest:= _lowest_depth < _highest ? _lowest_depth : 0

	if _highest != _highest_depth and (_trend[1] or high[_highest] < high[_highest_depth])
		_highest:= _highest_depth < _lowest ? _highest_depth : 0

	if _trend != _trend[1]
		_index	= _trend	?	_highest		:	_lowest
		_value	= _trend	?	high[_index]	:	low[_index]

		if array.size(_levels) == 2
			array.shift(_levels)

		array.push(_levels, _value)

	for _level in _levels
		if na(_level_low) or _level < _level_low
			_level_low:= _level
			lvl.push_size(_structure, "low", _level, 0)

		if na(_level_high) or _level > _level_high
			_level_high:= _level
			lvl.push_size(_structure, "high", _level, 0)

	if _structure.size() > 0
		ctx.context_set(_context, "change",	true)
		ctx.context_set(_context, _structure)

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Fibbonachi levels for local structure
//  ====================================================================================================================================================

export use_structure_fibbonachi(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("structure-fibbonachi")
	lvl.Level	    _level		=	lvl.create("level", ctx.contexts_get_level(contexts, "structure", "low").level, ctx.contexts_get_level(contexts, "structure", "high").level)

	//	We don't want to execute Fibb computation on every bar - don't waste TradingView's resources on the same computations
	if toolbox.use_init()
		ctx.context_set(_context, "factor", factor(contexts, _level))
		ctx.context_set(_context, toolbox.fibbonachi(_level, ctx.context_get_float(_context, "factor", 0)))

	//	Same here - we're computing day's fibbonachi, so listen for changes comming from "use_day_low_high" or who provides the vallues
	if ctx.contexts_get_bool(contexts, "structure", "change")
		ctx.context_set(_context, "factor", factor(contexts, _level))
		ctx.context_set(_context, toolbox.fibbonachi(_level, ctx.context_get_float(_context, "factor", 0)))

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Session range
//  ====================================================================================================================================================

export use_session(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("session")
	var string		_time		=	ctx.contexts_get_string(contexts,   "ctx",	"session.time",			"1000-2200")
	var bool		_exclusive	=	ctx.contexts_get_bool(contexts,     "ctx",	"session.exclusive",	true)
	bool			_is_session	=	_exclusive ? bool(time(timeframe.period, _time)) : true

	ctx.context_set(_context, "open", 			_is_session)
	ctx.context_set(_context, "is-open", 		_is_session and not _is_session[1])
	ctx.context_set(_context, "is-close", 	not	_is_session and		_is_session[1])

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      EMA
//  ====================================================================================================================================================

export use_ema(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("ema")
	var int			_length_1	=	ctx.contexts_get_int(	contexts, "ctx", "ema.length-1",		20)
	var int			_length_2	=	ctx.contexts_get_int(	contexts, "ctx", "ema.length-2",		50)
	var int			_length_3	=	ctx.contexts_get_int(	contexts, "ctx", "ema.length-3",		200)

	_ema_1	=	ta7.ema2(close, _length_1)
	_ema_2	=	ta7.ema2(close, _length_2)
	_ema_3	=	ta7.ema2(close, _length_3)

    ctx.context_set(_context,   "1.over.2", ta.crossover(_ema_1, _ema_2))
    ctx.context_set(_context,   "1.over.3", ta.crossover(_ema_1, _ema_3))

    ctx.context_set(_context,   "2.over.3", ta.crossover(_ema_2, _ema_3))
    ctx.context_set(_context,   "2.over.1", ta.crossover(_ema_2, _ema_1))

    ctx.context_set(_context,   "3.over.1", ta.crossover(_ema_3, _ema_1))
    ctx.context_set(_context,   "3.over.2", ta.crossover(_ema_3, _ema_2))

    ctx.context_set(_context,   "1.under.2", ta.crossunder(_ema_1, _ema_2))
    ctx.context_set(_context,   "1.under.3", ta.crossunder(_ema_1, _ema_3))

    ctx.context_set(_context,   "2.under.3", ta.crossunder(_ema_2, _ema_3))
    ctx.context_set(_context,   "2.under.1", ta.crossunder(_ema_2, _ema_1))

    ctx.context_set(_context,   "3.under.1", ta.crossunder(_ema_3, _ema_1))
    ctx.context_set(_context,   "3.under.2", ta.crossunder(_ema_3, _ema_2))

	ctx.context_set(_context,	lvl.size("1", _ema_1, 0))
	ctx.context_set(_context,	lvl.size("2", _ema_2, 0))
	ctx.context_set(_context,	lvl.size("3", _ema_3, 0))

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      CCI
//  ====================================================================================================================================================

export use_cci(ctx.Contexts contexts) =>
	var ctx.Context	_context	=	ctx.context_create("cci")
	var int			_length		=	ctx.contexts_get_int(	contexts, "ctx",	"cci.length",		20)

	_signal = ta.cci(hlc3, _length)

	ctx.context_set(_context, "below",				_signal 	< 	-100)
	ctx.context_set(_context, "below.exit",			_signal[1]	<	-100	and _signal 	> -100)
	ctx.context_set(_context, "below.enter",		_signal		<	-100	and _signal[1]	> -100)

	ctx.context_set(_context, "above",				_signal 	> 	100)
	ctx.context_set(_context, "above.enter", 		_signal[1]	<	100		and _signal		> 100)
	ctx.context_set(_context, "above.exit", 		_signal[1]	>	100		and _signal		< 100)

	ctx.context_set(_context, "zone", 				_signal 	>= -100		and _signal		<= 100)

	ctx.context_set(_context, "signal", 			_signal)

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Volume analytics
//  ====================================================================================================================================================

export use_volume(ctx.Contexts contexts) =>
    var ctx.Context	_context	=	ctx.context_create("volume")
    var             _low        =   volume
    var             _high       =   volume

    ctx.context_set(_context, "min",    false)
    ctx.context_set(_context, "max",    false)

    ctx.context_set(_context, "lower",  volume < volume[1])
    ctx.context_set(_context, "higher", volume > volume[1])

    ctx.context_set(_context, "size",   volume)

    if volume < _low
        ctx.context_set(_context, "min", true)
        _low:=  volume

    else if volume > _high
        ctx.context_set(_context, "max", true)
        _high:= volume

    if bool(ta.change(time('D')))
        _low:=  volume
        _high:= volume

    ctx.context_set(_context, "range",      _high - _low)
    ctx.context_set(_context, "percent",   (100 * volume) / ( _high - _low))

    ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Improved MACD support
//  ====================================================================================================================================================

smma(series int length, float source) =>
	float smma = 0
	sma = ta.sma(source, length)
	smma:= na(smma[1]) ? sma : (smma[1] * (length - 1) + source) / length
	smma

zlema(series int length, float source) =>
	ema1 = ta7.ema2(source, length)
	ema1 + (ema1 - ta7.ema2(ema1, length))

export use_macd2(ctx.Contexts contexts) =>
	var ctx.Context	_context		=	ctx.context_create("macd2")
	var int			_length			=	ctx.contexts_get_int(		contexts, "ctx", "macd2.length",	34)
	var int			_signal_length	=	ctx.contexts_get_int(		contexts, "ctx", "macd2.signal",	9)
	var int			_impulse_length	=	ctx.contexts_get_int(		contexts, "ctx", "macd2.impulse",	3)
	var float		_dmz_factor		=	ctx.contexts_get_float(		contexts, "ctx", "macd2.dmz",		6.6)
	var float		_flat_factor	=	ctx.contexts_get_float(		contexts, "ctx", "macd2.flat",		0.1)

	_high 		= smma(		_length,    high)
	_low		= smma(		_length,    low)
	_middle		= zlema(	_length,    hlc3)

	_macd 		= (_middle > _high) ? (_middle - _high) : (_middle < _low) ? (_middle - _low) : 0
	_signal 	= ta.sma(_macd, _signal_length)
	_histogram	= _macd - _signal

	_trend 		= hlc3 > _middle ? hlc3 > _high ? 1 : 2 : hlc3 < _low ? -2 : -1
	_dmz 		= (-1 * _dmz_factor) <= _macd and _macd <= _dmz_factor
	_flat		= -1 * _flat_factor <= _signal and _signal <= _flat_factor and -1 * _flat_factor <= _histogram and _histogram <= _flat_factor

	var _flat_count = 0
	_flat_count:= _flat ? _flat_count + 1 : 0

	_impulse	= not _flat and  _flat_count[1] >= _impulse_length

	ctx.context_set(_context, "dmz", 			_dmz)
	ctx.context_set(_context, "flat", 			_flat)

	ctx.context_set(_context, "up.low", 		_trend == 1)
	ctx.context_set(_context, "up.high", 		_trend == 2)

	ctx.context_set(_context, "down.low", 		_trend == -1)
	ctx.context_set(_context, "down.high", 		_trend == -2)

	ctx.context_set(_context, "up.impulse",		_impulse and _macd > 0)
	ctx.context_set(_context, "down.impulse",	_impulse and _macd < 0)

	ctx.context_set(_context, "long-dmz", 			_dmz and ta.crossover(_macd, _signal) and not _flat)
	ctx.context_set(_context, "long", 			not _dmz and ta.crossover(_macd, _signal) and not _flat)

	ctx.context_set(_context, "short-dmz",			_dmz and ta.crossunder(_macd, _signal) and not _flat)
	ctx.context_set(_context, "short", 			not _dmz and ta.crossunder(_macd, _signal) and not _flat)

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Trader syncs TradingView Strategy Management with internal PiPi state
//  ====================================================================================================================================================

export use_trader(ctx.Contexts contexts) =>
	if toolbox.use_init()
		ctx.contexts_set(		contexts,	"trade",	"exit",		false)
		ctx.contexts_set(		contexts,	"trade",	"closed",	false)

		ctx.contexts_set(		contexts,	"trade",	"long",		false)
		ctx.contexts_set(		contexts,	"trade",	"short",	false)
		ctx.contexts_set(		contexts,	"trade",	"profit",	na)
		ctx.contexts_set(		contexts,	"trade",	"loss",		na)
		ctx.contexts_set(		contexts,	"trade",	"pnl",		na)

		ctx.contexts_counter(	contexts,	"trade",	"length",	na)

	//	Check, if we've closed a trade, this handles also trades opened and closed on the same candle
	if strategy.closedtrades > strategy.closedtrades[1]
		ctx.contexts_set(		contexts,	"trade",	"exit",	true)

		ctx.contexts_set(		contexts,	"trade",	"long",		false)
		ctx.contexts_set(		contexts,	"trade",	"short",	false)
		ctx.contexts_set(		contexts,	"trade",	"profit",	na)
		ctx.contexts_set(		contexts,	"trade",	"loss",		na)
		ctx.contexts_set(		contexts,	"trade",	"pnl",		na)

		ctx.contexts_counter(	contexts,	"trade",	"length",	na)

	//	If there is still open position, count the trasde; here we don't care, if the trade was closed on the same candle,
	//	because it's handled properly by previous block
	if bool(strategy.position_size)
		ctx.contexts_set(		contexts,	"trade", 	"pnl",		strategy.openprofit)
		ctx.contexts_counter(	contexts,	"trade",	"length",	1)

	true

//  ====================================================================================================================================================
//      SuperTrend support
//  ====================================================================================================================================================

export use_super_trend(ctx.Contexts contexts) =>
	var ctx.Context	_context		=	ctx.context_create("super-trend")
	var int			_fast_length	=	ctx.contexts_get_int(		contexts, "ctx",	"super-trend.fast-length",		7)
	var float		_fast_factor	=	ctx.contexts_get_float(		contexts, "ctx",	"super-trend.fast-factor",		1)
	var int			_slow_length	=	ctx.contexts_get_int(		contexts, "ctx",	"super-trend.slow-length",		20)
	var float		_slow_factor	=	ctx.contexts_get_float(		contexts, "ctx",	"super-trend.slow-factor",		5)

	[_fast_signal, _fast_trend] = ta7.supertrend2(_fast_factor, _fast_length, false)
	[_slow_signal, _slow_trend] = ta7.supertrend2(_slow_factor, _slow_length, false)

	ctx.context_set(_context, "fast.signal",		_fast_signal)

	ctx.context_set(_context, "fast.flat",			_fast_signal == _fast_signal[1])
	ctx.context_set(_context, "fast.rise",			_fast_signal > _fast_signal[1])
	ctx.context_set(_context, "fast.fall",			_fast_signal < _fast_signal[1])

	ctx.context_set(_context, "fast.up",			_fast_trend < 0)
	ctx.context_set(_context, "fast.up.start",		_fast_trend < 0 and _fast_trend[1] > 0)
	ctx.context_set(_context, "fast.up.end",		_fast_trend > 0 and _fast_trend[1] < 0)

	ctx.context_set(_context, "fast.down",			_fast_trend > 0)
	ctx.context_set(_context, "fast.down.start",	_fast_trend > 0 and _fast_trend[1] < 0)
	ctx.context_set(_context, "fast.down.end",		_fast_trend < 0 and _fast_trend[1] > 0)

	ctx.context_set(_context, "slow.signal",		_slow_signal)

	ctx.context_set(_context, "slow.flat",			_slow_signal == _slow_signal[1])
	ctx.context_set(_context, "slow.rise",			_slow_signal > _slow_signal[1])
	ctx.context_set(_context, "slow.fall",			_slow_signal < _slow_signal[1])

	ctx.context_set(_context, "slow.up",			_slow_trend < 0)
	ctx.context_set(_context, "slow.up.start",		_slow_trend < 0 and _slow_trend[1] > 0)
	ctx.context_set(_context, "slow.up.end",		_slow_trend > 0 and _slow_trend[1] < 0)

	ctx.context_set(_context, "slow.down",			_slow_trend > 0)
	ctx.context_set(_context, "slow.down.start",	_slow_trend > 0 and _slow_trend[1] < 0)
	ctx.context_set(_context, "slow.down.end",		_slow_trend < 0 and _slow_trend[1] > 0)

	ctx.context_set(_context, "up",					_fast_trend < 0 and _slow_trend < 0)
	ctx.context_set(_context, "down",				_fast_trend > 0 and _slow_trend > 0)

	ctx.use_context(contexts, _context)

//  ====================================================================================================================================================
//      Simple Buy/Sell signals
//  ====================================================================================================================================================

export use_atr_signal(ctx.Contexts contexts) =>
	var ctx.Context	_context		=	ctx.context_create("atr-signal")
	var int			_i_length		=	ctx.contexts_get_int(		contexts, "ctx",	"atr-signal.length",		20)
	var float		_i_factor		=	ctx.contexts_get_float(		contexts, "ctx",	"atr-signal.factor",		3)

	_source		=	close
    _signal     = 	ta7.atr2(_i_length)
    _factor     = 	_i_factor * _signal

    _ema        = ta.ema(_source, 1)
    _trailing   = 0.0
    _trailing   := _source > nz(_trailing[1], 0) and _source[1] > nz(_trailing[1], 0) ? math.max(nz(_trailing[1]), _source - _factor) : _source < nz(_trailing[1], 0) and _source[1] < nz(_trailing[1], 0) ? math.min(nz(_trailing[1]), _source + _factor) : _source > nz(_trailing[1], 0) ? _source - _factor : _source + _factor

	ctx.context_set(_context, "buy",	_source > _trailing and ta.crossover(_ema, _trailing))
	ctx.context_set(_context, "sell",	_source < _trailing and ta.crossover(_trailing, _ema))

	ctx.use_context(contexts, _context)
